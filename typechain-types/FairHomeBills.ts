/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface FairHomeBillsInterface extends utils.Interface {
  functions: {
    "clientAddress()": FunctionFragment;
    "companyAddress()": FunctionFragment;
    "consumption(uint256)": FunctionFragment;
    "costPerKWH()": FunctionFragment;
    "currentKWHOwed()": FunctionFragment;
    "settleBalance()": FunctionFragment;
    "totalKWHUsed()": FunctionFragment;
    "viewAccountBalance()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "clientAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "companyAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "consumption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "costPerKWH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentKWHOwed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settleBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalKWHUsed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewAccountBalance",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "clientAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "companyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consumption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "costPerKWH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentKWHOwed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalKWHUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewAccountBalance",
    data: BytesLike
  ): Result;

  events: {};
}

export interface FairHomeBills extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FairHomeBillsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    clientAddress(overrides?: CallOverrides): Promise<[string]>;

    companyAddress(overrides?: CallOverrides): Promise<[string]>;

    consumption(
      _ammount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    costPerKWH(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentKWHOwed(overrides?: CallOverrides): Promise<[BigNumber]>;

    settleBalance(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalKWHUsed(overrides?: CallOverrides): Promise<[BigNumber]>;

    viewAccountBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  clientAddress(overrides?: CallOverrides): Promise<string>;

  companyAddress(overrides?: CallOverrides): Promise<string>;

  consumption(
    _ammount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  costPerKWH(overrides?: CallOverrides): Promise<BigNumber>;

  currentKWHOwed(overrides?: CallOverrides): Promise<BigNumber>;

  settleBalance(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalKWHUsed(overrides?: CallOverrides): Promise<BigNumber>;

  viewAccountBalance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    clientAddress(overrides?: CallOverrides): Promise<string>;

    companyAddress(overrides?: CallOverrides): Promise<string>;

    consumption(
      _ammount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    costPerKWH(overrides?: CallOverrides): Promise<BigNumber>;

    currentKWHOwed(overrides?: CallOverrides): Promise<BigNumber>;

    settleBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalKWHUsed(overrides?: CallOverrides): Promise<BigNumber>;

    viewAccountBalance(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    clientAddress(overrides?: CallOverrides): Promise<BigNumber>;

    companyAddress(overrides?: CallOverrides): Promise<BigNumber>;

    consumption(
      _ammount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    costPerKWH(overrides?: CallOverrides): Promise<BigNumber>;

    currentKWHOwed(overrides?: CallOverrides): Promise<BigNumber>;

    settleBalance(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalKWHUsed(overrides?: CallOverrides): Promise<BigNumber>;

    viewAccountBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    clientAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    companyAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    consumption(
      _ammount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    costPerKWH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentKWHOwed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    settleBalance(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalKWHUsed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    viewAccountBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
